input {
  beats {
    port => "5044"
    include_codec_tag => false
  }
}
filter {
  fingerprint {
    concatenate_sources => true
    source => [ "message", "@timestamp" ]
    target => "fingerprint"
    method => "SHA256"
    key => "random-key-to-use-as-salt-here"
  }

  if "apache_access_log" in [subtype]
  {
    grok {
      patterns_dir => ["./patterns"]
      match => { "message" => "%{HTTPD_COMBINEDLOG}" }
    }
    if ([response]) {
      if [response] < "500" { drop { } }
      mutate { add_tag => [ "http%{response}" ] }
    }
    mutate {
      replace => { "type" => "apache_access_log" }
    }
  }

  if "apache_error_log" in [subtype]
  {
    grok {
      patterns_dir => ["./patterns"]
      match => { "message" => "%{HTTPD20_ERRORLOG}" }
    }
    mutate {
      replace => { "type" => "apache_error_log" }
    }
  }

  if "apache" in [subtype]
  {
    if [loglevel] == "normal"
      { drop { } }
    if [loglevel] == "notice"
      { drop { } }
    if [loglevel] == "warn"
      { mutate { add_tag => [ "warning" ] } }
    if [loglevel] == "error"
      { mutate { add_tag => [ "error" ] } }
    if [loglevel] == "crit"
      { mutate { add_tag => [ "critical" ] } }
    if [loglevel] == "fatal"
      { mutate { add_tag => [ "fatal" ] } }
    if [loglevel] == "debug"
      { mutate { add_tag => [ "debug" ] } }
    if "ELB-HealthChecker" in [message]
      { mutate { add_tag => [ "healthcheck", "elb" ] } }
  }

  if "backend_error_log" in [subtype]
  {
    mutate { replace => { "type" => "backend_error_log" } }
    if [message] == "Waiting" or [message] == "Waiting Waiting"
      { drop { } }
    if "Traceback" in [message] or "traceback" in [message] or "Stacktrace" in [message] or "stacktrace" in [message]
      { mutate { add_tag => [ "stacktrace" ] } }
    if "WSGI" in [message] or "wsgi" in [message]
      { mutate { add_tag => [ "wsgi" ] } }
    if "CRITICAL" in [message]
      { mutate { add_tag => [ "critical" ] } }
    if "ERROR" in [message]
      { mutate { add_tag => [ "error" ] } }
    if "Exception" in [message]
      { mutate { add_tag => [ "exception" ] } }
    if "RuntimeError" in [message]
      { mutate { add_tag => [ "runtimeerror" ] } }
    if "WARNING" in [message]
      { mutate { add_tag => [ "warning" ] } }
    if "INFO" in [message]
      { mutate { add_tag => [ "info" ] } }
    if "DEBUG" in [message]
      { mutate { add_tag => [" debug" ] } }
    if "HTTPError" in [message]
      { mutate { add_tag => [ "httperror" ] } }
  }

  if "job_runner_log" in [subtype]
  { 
    mutate { replace => { "type" => "job_runner_log" } }
  }

  if "SendGrid" in [message] or "sendgrid" in [message]
    { mutate { add_tag => [ "sendgrid" ] } }
  if "SparkPost" in [message] or "sparkpost" in [message]
    { mutate { add_tag => [ "sparkpost" ] } }
  if "transactional_mailings" in [message]
    { mutate { add_tag => [ "transactional_mailings" ] } }
  if "Sentry" in [message] or "sentry" in [message]
    { mutate { add_tag => [ "sentry" ] } }
  if "donation" in [message]
    { mutate { add_tag => [ "donation" ] } }
  if "ak_slowrequest" in [message] or "Slow Request" in [message]
    { mutate { add_tag => [ "slowrequest" ] } }
  if "DisallowedHost" in [message]
    { mutate { add_tag => [ "disallowedhost" ] } }
  if "record_clicks" in [message] and !("bin/record_clicks.sh >/dev/null 2>/dev/null </dev/null" in [message])
    { mutate { add_tag => [ "record_clicks" ] } }
  if "MySQL" in [message] or "mysql" in [message] or !("MySQL-python==1.2.5")
    { mutate { add_tag => [ "mysql" ] } }
  
  if "dev_" in [subtype]
  {
    mutate { copy => { "source" => "dev_path" } }
    mutate {
      gsub => [ "dev_path", "[/_]", " " ]
    }
    grok {
      match => { "dev_path" => "%{WORD:rootdir} %{WORD:dev}" }
    }
    mutate { remove_field => [ "dev_path", "rootdir" ] }
  }

  if [source] =~ "_current"
  {
    mutate { copy => { "source" => "log_path" } }
    mutate {
      gsub => [ "log_path", "/", " " ]
    }
    grok {
      match => { "log_path" => "%{WORD:logsdir} %{WORD:client}" }
    }
    mutate { remove_field => [ "log_path", "logsdir" ] }
  } else if [source] =~ "backend_errors" or [source] =~ "job_runner"
  {
    mutate { copy => { "source" => "client_path" } }
    mutate {
      gsub => [ "client_path", "[/.]", " " ]
    }
    grok {
      match => { "client_path" => "%{WORD:home} %{WORD:homedir} %{WORD:actionkit} %{WORD:apache} %{WORD:logsdir} %{WORD:log} %{WORD:client}" }
    }
    mutate { remove_field => [ "client_path", "home", "homedir", "actionkit", "apache", "logsdir", "log" ] }
  } else
  {
    mutate { copy => { "source" => "client_path" } }
    mutate {
      gsub => [ "client_path", "[/-]", " " ]
    }
    grok {
      match => { "client_path" => "%{WORD:home} %{WORD:homedir} %{WORD:actionkit} %{WORD:apache} %{WORD:logsdir} %{WORD:log} %{WORD:client}" }
    }
    mutate { remove_field => [ "client_path", "home", "homedir", "actionkit", "apache", "logsdir", "log" ] }
  }

  if "[ip-10-50-1-36]" in [message] or "[ip-10-50-1-236]" in [message]
  {
    mutate {
      replace => { "env" => "staging" }
    }
  }

  mutate {
    rename => { "[beat][hostname]" => "hostname" }
    lowercase => [ "hostname" ]
    remove_field => [ "host", "[beat][name]" ]
  }
}
output {
  stdout { codec => rubydebug }
  elasticsearch {
    hosts => [ "https://your-elasticsearch-endpoint.us-west-1.aws.found.io:9243" ]
    user => "logstash_internal"
    password => "logstash-internal-password-here"
    doc_as_upsert => true
    document_id => "%{[fingerprint]}"
    index => "current"
  }
}